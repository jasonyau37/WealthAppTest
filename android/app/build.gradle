// Example signing configuration snippet that reads android/key.properties if present.
// If you run `flutter create .` locally this file will be largely generated, but
// the signing configuration below shows how the workflow-created android/key.properties is used.

apply plugin: 'com.android.application'

android {
    compileSdkVersion 33

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.example.wealth_app_test"
        minSdkVersion 16
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
    }

    // load keystore properties if present
    def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file("key.properties")
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
            // Use the signing config only if it exists
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

// The rest of the Gradle configuration is managed by Flutter.