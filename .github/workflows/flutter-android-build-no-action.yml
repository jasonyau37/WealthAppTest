name: Build Flutter Debug APK (self-contained)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-debug-apk:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Download and install Flutter SDK (pinned)
        run: |
          set -euo pipefail
          # Pin Flutter version here:
          FLUTTER_VERSION="3.10.6"
          FLUTTER_ARCHIVE="flutter_linux_${FLUTTER_VERSION}-stable.tar.xz"
          FLUTTER_URL="https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/${FLUTTER_ARCHIVE}"
          echo "Downloading Flutter ${FLUTTER_VERSION}..."
          wget -q "${FLUTTER_URL}" -O "/tmp/${FLUTTER_ARCHIVE}"
          tar -xf "/tmp/${FLUTTER_ARCHIVE}" -C "${HOME}"
          FLUTTER_HOME="${HOME}/flutter"
          # Make sure flutter/bin is available in THIS step immediately:
          export PATH="${FLUTTER_HOME}/bin:${FLUTTER_HOME}/bin/cache/dart-sdk/bin:${PATH}"
          echo "PATH for this step: $PATH"
          # Also persist for later steps:
          echo "${FLUTTER_HOME}/bin" >> $GITHUB_PATH
          echo "${FLUTTER_HOME}/bin/cache/dart-sdk/bin" >> $GITHUB_PATH
          "${FLUTTER_HOME}/bin/flutter" --version
          # Precache android artifacts for faster builds
          "${FLUTTER_HOME}/bin/flutter" precache --android

      - name: Install Android commandline tools and platform 28
        run: |
          set -euo pipefail
          ANDROID_ROOT="${RUNNER_TEMP}/android-sdk"
          mkdir -p "${ANDROID_ROOT}"
          cd "${ANDROID_ROOT}"
          CLI_ZIP="commandlinetools-linux-9477386_latest.zip"
          wget -q "https://dl.google.com/android/repository/${CLI_ZIP}" -O cmdline.zip
          unzip -q cmdline.zip -d cmdline-tools
          mkdir -p cmdline-tools/latest
          if [ -d cmdline-tools/cmdline-tools ]; then
            mv cmdline-tools/cmdline-tools/* cmdline-tools/latest/ || true
          else
            mv cmdline-tools/* cmdline-tools/latest/ || true
          fi
          SDKMANAGER="${ANDROID_ROOT}/cmdline-tools/latest/bin/sdkmanager"
          chmod +x "${SDKMANAGER}"
          export PATH="${ANDROID_ROOT}/cmdline-tools/latest/bin:${PATH}"
          yes | "${SDKMANAGER}" --sdk_root="${ANDROID_ROOT}" --licenses || true
          "${SDKMANAGER}" --sdk_root="${ANDROID_ROOT}" "platform-tools" "platforms;android-28" "build-tools;33.0.2" "emulator" "system-images;android-28;google_apis;x86_64"
          echo "ANDROID_SDK_ROOT=${ANDROID_ROOT}" >> $GITHUB_ENV
          echo "${ANDROID_ROOT}/platform-tools" >> $GITHUB_PATH
          echo "${ANDROID_ROOT}/emulator" >> $GITHUB_PATH
          echo "${ANDROID_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
        shell: bash

      - name: Ensure pubspec has valid package name (optional check)
        run: |
          if grep -q "^name: .*[A-Z]" pubspec.yaml; then
            echo "Invalid package name found in pubspec.yaml (contains uppercase). Replacing with wealth_app_test."
            sed -i 's/^name: .*/name: wealth_app_test/' pubspec.yaml
            git --no-pager diff -- pubspec.yaml || true
          else
            echo "pubspec name OK."
          fi

      - name: Ensure platform folders exist (flutter create) with valid project name
        run: |
          # Force a correct android/ Gradle scaffold in CI
          flutter create . --project-name wealth_app_test --platforms android --overwrite

      - name: Flutter pub get
        run: flutter pub get

      - name: Build debug APK
        run: flutter build apk --debug --target-platform android-arm,android-arm64,android-x64

      - name: Upload debug APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk